{"version":3,"sources":["../../../src/api/todo/todo.ctrl.js"],"names":["create","req","res","body","name","category","userId","newTodo","Todo","user","save","err","todo","status","send","ok","error","message","getAll","find","sort","createdAt","todos","getMyTodos","deleteById","todoId","params","findById","_id","userType","String","mongoose","Types","ObjectId","findByIdAndRemove","result","getMyTodosByCategory","catId","getAllByCategory","getById"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;SAEeA,M;;;;;0FAAf,iBAAsBC,GAAtB,EAA2BC,GAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEmCD,GAAG,CAACE,IAFvC,EAEgBC,IAFhB,aAEgBA,IAFhB,EAEsBC,QAFtB,aAEsBA,QAFtB;AAGgBC,YAAAA,MAHhB,GAG2BL,GAH3B,CAGgBK,MAHhB;AAKYC,YAAAA,OALZ,GAKsB,IAAIC,gBAAJ,EALtB;AAMQD,YAAAA,OAAO,CAACH,IAAR,GAAeA,IAAf;AACAG,YAAAA,OAAO,CAACE,IAAR,GAAeH,MAAf;AACAC,YAAAA,OAAO,CAACF,QAAR,GAAmBA,QAAnB;AARR;AAAA,mBAUcE,OAAO,CAACG,IAAR,CAAa,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC9B,kBAAID,GAAJ,EAAS;AACL,uBAAOT,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,kBAAAA,EAAE,EAAE,KADoB;AAExBC,kBAAAA,KAAK,EAAEL,GAAG,CAACM;AAFa,iBAArB,CAAP;AAIH,eALD,MAMK;AACD,uBAAOf,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,kBAAAA,EAAE,EAAE,IADoB;AAExBH,kBAAAA,IAAI,EAAJA;AAFwB,iBAArB,CAAP;AAIH;AACJ,aAbK,CAVd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyBQV,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,YAAEG,OAAvB;;AAzBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA6BeC,M;;;;;0FAAf,kBAAsBjB,GAAtB,EAA2BC,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE4BM,iBAAKW,IAAL,CAAU,EAAV,EAAcC,IAAd,CAAmB;AAAEC,cAAAA,SAAS,EAAG,CAAC;AAAf,aAAnB,CAF5B;;AAAA;AAEcC,YAAAA,KAFd;AAGQpB,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,cAAAA,EAAE,EAAE,IADa;AAEjBO,cAAAA,KAAK,EAALA;AAFiB,aAArB;AAHR;AAAA;;AAAA;AAAA;AAAA;AAQQpB,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,cAAAA,EAAE,EAAE,KADa;AAEjBC,cAAAA,KAAK,EAAE,aAAIC;AAFM,aAArB;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAeeM,U;;;;;8FAAf,kBAA0BtB,GAA1B,EAA+BC,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEgBI,YAAAA,MAFhB,GAE2BL,GAF3B,CAEgBK,MAFhB;AAAA;AAAA,mBAI4BE,iBAAKW,IAAL,CAAU;AAAEV,cAAAA,IAAI,EAAEH;AAAR,aAAV,EAA4Bc,IAA5B,CAAiC;AAAEC,cAAAA,SAAS,EAAG,CAAC;AAAf,aAAjC,CAJ5B;;AAAA;AAIcC,YAAAA,KAJd;AAKQpB,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,cAAAA,EAAE,EAAE,IADa;AAEjBO,cAAAA,KAAK,EAALA;AAFiB,aAArB;AALR;AAAA;;AAAA;AAAA;AAAA;AAUQpB,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,cAAAA,EAAE,EAAE,KADa;AAEjBC,cAAAA,KAAK,EAAE,aAAIC;AAFM,aAArB;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAiBeO,U;;;;;8FAAf,kBAA0BvB,GAA1B,EAA+BC,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACYuB,YAAAA,MADZ,GACuBxB,GAAG,CAACyB,MAD3B,CACYD,MADZ;AAEYnB,YAAAA,MAFZ,GAEuBL,GAFvB,CAEYK,MAFZ;AAAA;AAAA,mBAGuBE,iBAAKmB,QAAL,CAAc;AAAEC,cAAAA,GAAG,EAAEH;AAAP,aAAd,CAHvB;;AAAA;AAGUb,YAAAA,IAHV;;AAAA,kBAKQA,IAAI,KAAK,IALjB;AAAA;AAAA;AAAA;;AAMQV,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,cAAAA,EAAE,EAAE,KADa;AAEjBC,cAAAA,KAAK,sCAA+BS,MAA/B;AAFY,aAArB;AANR;;AAAA;AAAA,kBAcQ,CAAC,CAACxB,GAAG,CAAC4B,QAAL,IAAiB5B,GAAG,CAAC4B,QAAJ,KAAiB,OAAnC,KAA+CC,MAAM,CAACC,qBAASC,KAAT,CAAeC,QAAf,CAAwB3B,MAAxB,CAAD,CAAN,KAA4CwB,MAAM,CAAClB,IAAI,CAACH,IAAN,CAdzG;AAAA;AAAA;AAAA;;AAeQP,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,cAAAA,EAAE,EAAE,KADa;AAEjBC,cAAAA,KAAK,EAAE;AAFU,aAArB;AAfR;;AAAA;AAqBIR,6BAAK0B,iBAAL,CAAuB;AAAEN,cAAAA,GAAG,EAAEH;AAAP,aAAvB,EAAwC,UAACd,GAAD,EAAMwB,MAAN,EAAiB;AACrD,kBAAIxB,GAAJ,EAAS;AACLT,gBAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,kBAAAA,EAAE,EAAE,KADa;AAEjBC,kBAAAA,KAAK,EAAEL,GAAG,CAACM;AAFM,iBAArB;AAIA;AACH;;AACDf,cAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,gBAAAA,EAAE,EAAE,IADa;AAEjBE,gBAAAA,OAAO,iBAAUkB,MAAM,CAAC/B,IAAjB;AAFU,eAArB;AAIH,aAZD;;AArBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAoCegC,oB;;;;;wGAAf,kBAAoCnC,GAApC,EAAyCC,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEgBI,YAAAA,MAFhB,GAE2BL,GAF3B,CAEgBK,MAFhB;AAGgB+B,YAAAA,KAHhB,GAG0BpC,GAAG,CAACyB,MAH9B,CAGgBW,KAHhB;AAAA;AAAA,mBAK4B7B,iBAAKW,IAAL,CAAU;AAAEV,cAAAA,IAAI,EAAEH,MAAR;AAAgBD,cAAAA,QAAQ,EAAEgC;AAA1B,aAAV,EAA6CjB,IAA7C,CAAkD;AAAEC,cAAAA,SAAS,EAAG,CAAC;AAAf,aAAlD,CAL5B;;AAAA;AAKcC,YAAAA,KALd;AAMQpB,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,cAAAA,EAAE,EAAE,IADa;AAEjBO,cAAAA,KAAK,EAALA;AAFiB,aAArB;AANR;AAAA;;AAAA;AAAA;AAAA;AAWQpB,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,cAAAA,EAAE,EAAE,KADa;AAEjBC,cAAAA,KAAK,EAAE,aAAIC;AAFM,aAArB;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAkBeqB,gB;;;;;oGAAf,kBAAgCrC,GAAhC,EAAqCC,GAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEgBmC,YAAAA,KAFhB,GAE0BpC,GAAG,CAACyB,MAF9B,CAEgBW,KAFhB;AAAA;AAAA,mBAI4B7B,iBAAKW,IAAL,CAAU;AAAEd,cAAAA,QAAQ,EAAEgC;AAAZ,aAAV,EAA+BjB,IAA/B,CAAoC;AAAEC,cAAAA,SAAS,EAAG,CAAC;AAAf,aAApC,CAJ5B;;AAAA;AAIcC,YAAAA,KAJd;AAKQpB,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,cAAAA,EAAE,EAAE,IADa;AAEjBO,cAAAA,KAAK,EAALA;AAFiB,aAArB;AALR;AAAA;;AAAA;AAAA;AAAA;AAUQpB,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,cAAAA,EAAE,EAAE,KADa;AAEjBC,cAAAA,KAAK,EAAE,aAAIC;AAFM,aAArB;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAiBesB,O;;;;;2FAAf,kBAAuBtC,GAAvB,EAA4BC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACYuB,YAAAA,MADZ,GACuBxB,GAAG,CAACyB,MAD3B,CACYD,MADZ;AAEYnB,YAAAA,MAFZ,GAEuBL,GAFvB,CAEYK,MAFZ;AAAA;AAAA,mBAIuBE,iBAAKmB,QAAL,CAAc;AAAEC,cAAAA,GAAG,EAAEH;AAAP,aAAd,CAJvB;;AAAA;AAIUb,YAAAA,IAJV;;AAAA,kBAMQA,IAAI,KAAK,IANjB;AAAA;AAAA;AAAA;;AAOQV,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,cAAAA,EAAE,EAAE,KADa;AAEjBC,cAAAA,KAAK,sCAA+BS,MAA/B;AAFY,aAArB;AAPR;;AAAA;AAAA,kBAeQ,CAAC,CAACxB,GAAG,CAAC4B,QAAL,IAAiB5B,GAAG,CAAC4B,QAAJ,KAAiB,OAAnC,KAA+CC,MAAM,CAACC,qBAASC,KAAT,CAAeC,QAAf,CAAwB3B,MAAxB,CAAD,CAAN,KAA4CwB,MAAM,CAAClB,IAAI,CAACH,IAAN,CAfzG;AAAA;AAAA;AAAA;;AAgBQP,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,cAAAA,EAAE,EAAE,KADa;AAEjBC,cAAAA,KAAK,EAAE;AAFU,aAArB;AAhBR;;AAAA;AAsBId,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,cAAAA,EAAE,EAAE,IADa;AAEjBH,cAAAA,IAAI,EAAJA;AAFiB,aAArB;;AAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;eA4Be;AACXZ,EAAAA,MAAM,EAANA,MADW;AAEXuB,EAAAA,UAAU,EAAVA,UAFW;AAGXL,EAAAA,MAAM,EAANA,MAHW;AAIXM,EAAAA,UAAU,EAAVA,UAJW;AAKXY,EAAAA,oBAAoB,EAApBA,oBALW;AAMXE,EAAAA,gBAAgB,EAAhBA,gBANW;AAOXC,EAAAA,OAAO,EAAPA;AAPW,C","sourcesContent":["import mongoose from 'mongoose';\r\n\r\nimport Todo from './todo.model';\r\n\r\nasync function create(req, res) {\r\n    try {\r\n        const { name, category } = req.body;\r\n        const { userId } = req;\r\n\r\n        let newTodo = new Todo();\r\n        newTodo.name = name;\r\n        newTodo.user = userId;\r\n        newTodo.category = category;\r\n\r\n        await newTodo.save((err, todo) => { \r\n            if (err) { \r\n                return res.status(400).send({ \r\n                    ok: false,\r\n                    error: err.message\r\n                }); \r\n            } \r\n            else { \r\n                return res.status(200).send({ \r\n                    ok: true,\r\n                    todo\r\n                }); \r\n            } \r\n        });\r\n    } catch (e) {\r\n        res.status(400).send(e.message);\r\n    }\r\n}\r\n\r\nasync function getAll(req, res) {\r\n    try {\r\n        const todos = await Todo.find({}).sort({ createdAt : -1} );\r\n        res.status(200).send({\r\n            ok: true,\r\n            todos\r\n        }); \r\n    } catch (err) {\r\n        res.status(400).send({ \r\n            ok: false,\r\n            error: err.message\r\n        }); \r\n    }\r\n}\r\n\r\nasync function getMyTodos(req, res) {\r\n    try {\r\n        const { userId } = req;\r\n        \r\n        const todos = await Todo.find({ user: userId }).sort({ createdAt : -1} )\r\n        res.status(200).send({\r\n            ok: true,\r\n            todos\r\n        }); \r\n    } catch (err) {\r\n        res.status(400).send({ \r\n            ok: false,\r\n            error: err.message\r\n        }); \r\n    }\r\n}\r\n\r\nasync function deleteById(req, res) {\r\n    const { todoId } = req.params;\r\n    const { userId } = req;\r\n    const todo = await Todo.findById({ _id: todoId });\r\n\r\n    if (todo === null) {\r\n        res.status(404).send({\r\n            ok: false,\r\n            error: `There is no todo with id '${todoId}'!`\r\n        });\r\n        return;\r\n    }\r\n\r\n    // Delete if only admin or its user\r\n    if ((!req.userType || req.userType !== 'admin') && String(mongoose.Types.ObjectId(userId)) !== String(todo.user)) {\r\n        res.status(400).send({\r\n            ok: false,\r\n            error: \"You are not allowed to delete this todo!\"\r\n        });\r\n        return;\r\n    }\r\n    Todo.findByIdAndRemove({ _id: todoId }, (err, result) => {\r\n        if (err) {\r\n            res.status(400).send({\r\n                ok: false,\r\n                error: err.message\r\n            });\r\n            return;\r\n        }\r\n        res.status(200).send({\r\n            ok: true,\r\n            message: `The '${result.name}' todo has been deleted.`\r\n        });\r\n    });\r\n}\r\n\r\nasync function getMyTodosByCategory(req, res) {\r\n    try {\r\n        const { userId } = req;\r\n        const { catId } = req.params;\r\n\r\n        const todos = await Todo.find({ user: userId, category: catId }).sort({ createdAt : -1} )\r\n        res.status(200).send({\r\n            ok: true,\r\n            todos\r\n        }); \r\n    } catch (err) {\r\n        res.status(400).send({ \r\n            ok: false,\r\n            error: err.message\r\n        }); \r\n    }\r\n}\r\n\r\nasync function getAllByCategory(req, res) {\r\n    try {\r\n        const { catId } = req.params;\r\n\r\n        const todos = await Todo.find({ category: catId }).sort({ createdAt : -1} )\r\n        res.status(200).send({\r\n            ok: true,\r\n            todos\r\n        }); \r\n    } catch (err) {\r\n        res.status(400).send({ \r\n            ok: false,\r\n            error: err.message\r\n        }); \r\n    }\r\n}\r\n\r\nasync function getById(req, res) {\r\n    const { todoId } = req.params;\r\n    const { userId } = req;\r\n\r\n    const todo = await Todo.findById({ _id: todoId });\r\n    \r\n    if (todo === null) {\r\n        res.status(404).send({\r\n            ok: false,\r\n            error: `There is no todo with id '${todoId}'!`\r\n        });\r\n        return;\r\n    }\r\n\r\n    // Get if only admin or its user\r\n    if ((!req.userType || req.userType !== 'admin') && String(mongoose.Types.ObjectId(userId)) !== String(todo.user)) {\r\n        res.status(400).send({\r\n            ok: false,\r\n            error: \"You are not allowed to delete this todo!\"\r\n        });\r\n        return;\r\n    }\r\n    res.status(200).send({\r\n        ok: true,\r\n        todo\r\n    });\r\n}\r\n\r\nexport default {\r\n    create,\r\n    getMyTodos,\r\n    getAll,\r\n    deleteById,\r\n    getMyTodosByCategory,\r\n    getAllByCategory,\r\n    getById\r\n};"],"file":"todo.ctrl.js"}