{"version":3,"sources":["../../../src/api/user/user.ctrl.js"],"names":["register","req","res","body","email","firstName","lastName","password","phone","User","findOne","user","_","isEmpty","status","send","ok","message","newUser","setPassword","generateAuthToken","token","save","err","error","id","_id","active","type","login","validPassword"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\r\n\r\nimport User from './user.model';\r\n\r\nasync function register(req, res) {\r\n    try {\r\n        const { email, firstName, lastName, password, phone } = req.body;\r\n\r\n        let user = await User.findOne({ email });\r\n        if (!_.isEmpty(user)) {\r\n            return res.status(400)\r\n                .send({\r\n                    ok: false,\r\n                    message : `A user with '${email}' Email is exists.`,\r\n                });\r\n        }\r\n\r\n        let newUser = new User();\r\n        newUser.firstName = firstName;\r\n        newUser.lastName = lastName;\r\n        newUser.email = email;\r\n        newUser.phone = phone;\r\n        newUser.password=password;\r\n        newUser.setPassword(req.body.password); \r\n        const token = await newUser.generateAuthToken();\r\n        newUser.token = token;\r\n\r\n        await newUser.save((err, user) => { \r\n            if (err) { \r\n                return res.status(400).send({ \r\n                    ok: false,\r\n                    error: err.message\r\n                }); \r\n            } \r\n            else { \r\n                return res.status(200).send({ \r\n                    ok: true,\r\n                    user: {\r\n                        id: user._id,\r\n                        email: user.email,\r\n                        firstName: user.firstName,\r\n                        lastName: user.lastName,\r\n                        phone: user.phone,\r\n                        token: user.token,\r\n                        active: user.active,\r\n                        type: user.type\r\n                    }\r\n                }); \r\n            } \r\n        });\r\n    } catch (e) {\r\n        res.status(400).send(e.message);\r\n    }\r\n}\r\n\r\nasync function login(req, res) {\r\n    const { email, password } = req.body;\r\n    \r\n    // Find user with requested email \r\n    User.findOne({ email }, function(err, user) { \r\n        if (err) {\r\n            res.status(400).send({\r\n                ok: false,\r\n                error: err.message\r\n            })\r\n        }\r\n        \r\n        if (user === null) { \r\n            return res.status(400).send({ \r\n                ok: false,\r\n                message : \"User not found.\"\r\n            }); \r\n        } \r\n        else { \r\n            if (user.validPassword(password)) { \r\n                return res.status(200).send({ \r\n                    ok: true,\r\n                    user: {\r\n                        id: user._id,\r\n                        email: user.email,\r\n                        firstName: user.firstName,\r\n                        lastName: user.lastName,\r\n                        phone: user.phone,\r\n                        token: user.generateAuthToken(),\r\n                        active: user.active,\r\n                        type: user.type\r\n                    }                   \r\n                }) \r\n            } \r\n            else { \r\n                return res.status(400).send({ \r\n                    ok: false,\r\n                    message : \"Wrong Password\"\r\n                }); \r\n            } \r\n        } \r\n    }); \r\n}\r\n\r\nexport default {\r\n    register,\r\n    login\r\n};"],"file":"user.ctrl.js"}