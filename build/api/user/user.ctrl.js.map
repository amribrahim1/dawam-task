{"version":3,"sources":["../../../src/api/user/user.ctrl.js"],"names":["register","req","res","body","email","firstName","lastName","password","phone","User","findOne","user","_","isEmpty","status","send","newUser","setPassword","generateAuthToken","token","save","err","ok","message","status_code","active","login","validPassword"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\r\n\r\nimport User from './user.model';\r\n\r\nasync function register(req, res) {\r\n    try {\r\n        const { email, firstName, lastName, password, phone } = req.body;\r\n\r\n        let user = await User.findOne({email});\r\n        if (!_.isEmpty(user)) {\r\n            res.status(400)\r\n                .send(\"A user with this Email is exists\")\r\n            return;\r\n        }\r\n\r\n        let newUser = new User();\r\n        newUser.firstName = firstName;\r\n        newUser.lastName = lastName;\r\n        newUser.email = email;\r\n        newUser.phone = phone;\r\n        newUser.password=password;\r\n        newUser.setPassword(req.body.password); \r\n        const token = await newUser.generateAuthToken();\r\n        newUser.token = token;\r\n\r\n        await newUser.save((err, user) => { \r\n            if (err) { \r\n                return res.status(400).send({ \r\n                    ok: false,\r\n                    message : \"Failed to add user.\",\r\n                    status_code: 200,\r\n                }); \r\n            } \r\n            else { \r\n                return res.status(200).send({ \r\n                    ok: true,\r\n                    user: {\r\n                        email: user.email,\r\n                        firstName: user.firstName,\r\n                        lastName: user.lastName,\r\n                        phone: user.phone,\r\n                        token: user.token,\r\n                        active: user.active\r\n                    }\r\n                }); \r\n            } \r\n        });\r\n    } catch (e) {\r\n        res.status(400).send(e.message)\r\n    }\r\n}\r\n\r\nasync function login(req, res) {\r\n    const { email, password } = req.body;\r\n    \r\n    // Find user with requested email \r\n    User.findOne({ email }, function(err, user) { \r\n        if (err) {\r\n            res.status(400).send({\r\n                ok: false,\r\n                err\r\n            })\r\n        }\r\n        \r\n        if (user === null) { \r\n            return res.status(400).send({ \r\n                ok: false,\r\n                message : \"User not found.\"\r\n            }); \r\n        } \r\n        else { \r\n            if (user.validPassword(password)) { \r\n                return res.status(200).send({ \r\n                    ok: true,\r\n                    user: {\r\n                        email: user.email,\r\n                        firstName: user.firstName,\r\n                        lastName: user.lastName,\r\n                        phone: user.phone,\r\n                        token: user.generateAuthToken(),\r\n                        active: user.active\r\n                    }                   \r\n                }) \r\n            } \r\n            else { \r\n                return res.status(400).send({ \r\n                    ok: false,\r\n                    message : \"Wrong Password\"\r\n                }); \r\n            } \r\n        } \r\n    }); \r\n}\r\n\r\nexport default {\r\n    register,\r\n    login\r\n};"],"file":"user.ctrl.js"}