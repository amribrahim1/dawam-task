{"version":3,"sources":["../../../src/api/user/user.model.js"],"names":["UserSchema","mongoose","Schema","email","type","String","required","firstName","lastName","password","phone","token","active","Boolean","salt","timestamps","methods","generateAuthToken","jwt","sign","id","_id","setPassword","crypto","randomBytes","toString","pbkdf2Sync","validPassword","hash","model"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACnCC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,mBAAP;AAA1B,GAD4B;AAEnCC,EAAAA,SAAS,EAAE;AAAEH,IAAAA,IAAI,EAAEC,MAAR;AAAe,eAAS;AAAxB,GAFwB;AAGnCG,EAAAA,QAAQ,EAAE;AAAEJ,IAAAA,IAAI,EAAEC,MAAR;AAAe,eAAS;AAAxB,GAHyB;AAInCI,EAAAA,QAAQ,EAAE;AAAEL,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,sBAAP;AAA1B,GAJyB;AAKnCI,EAAAA,KAAK,EAAE;AAAEN,IAAAA,IAAI,EAAEC;AAAR,GAL4B;AAMnCM,EAAAA,KAAK,EAAE;AAAEP,IAAAA,IAAI,EAAEC,MAAR;AAAgB,eAAS;AAAzB,GAN4B;AAOnCO,EAAAA,MAAM,EAAE;AAAE,eAAS,IAAX;AAAiBR,IAAAA,IAAI,EAAES;AAAvB,GAP2B;AAQnCC,EAAAA,IAAI,EAAGT,MAR4B;AASnCD,EAAAA,IAAI,EAAE;AAAEA,IAAAA,IAAI,EAAEC,MAAR;AAAgB,eAAS;AAAzB;AAT6B,CAApB,EAUjB;AAAEU,EAAAA,UAAU,EAAE;AAAd,CAViB,CAAnB;;AAaAf,UAAU,CAACgB,OAAX,CAAmBC,iBAAnB,GAAuC,YAAW;AAC9C,MAAMN,KAAK,GAAGO,yBAAIC,IAAJ,CAAS;AACnBC,IAAAA,EAAE,EAAE,KAAKC,GADU;AAEnBlB,IAAAA,KAAK,EAAE,KAAKA,KAFO;AAGnBI,IAAAA,SAAS,EAAE,KAAKA,SAHG;AAInBC,IAAAA,QAAQ,EAAE,KAAKA,QAJI;AAKnBJ,IAAAA,IAAI,EAAE,KAAKA;AALQ,GAAT,EAMX,UANW,CAAd,CAD8C,CAO1B;;;AACpB,OAAKO,KAAL,KAAeA,KAAf;AACA,SAAOA,KAAP;AACH,CAVD,C,CAYA;;;AACAX,UAAU,CAACgB,OAAX,CAAmBM,WAAnB,GAAiC,YAAW;AACxC;AACA,OAAKR,IAAL,GAAYS,mBAAOC,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CAAZ,CAFwC,CAIxC;;AAEA,OAAKhB,QAAL,GAAgBc,mBAAOG,UAAP,CAAkB,KAAKjB,QAAvB,EAAiC,KAAKK,IAAtC,EAChB,IADgB,EACV,EADU,YACIW,QADJ,OAAhB;AAEH,CARD,C,CAUA;;;AACAzB,UAAU,CAACgB,OAAX,CAAmBW,aAAnB,GAAmC,UAASlB,QAAT,EAAmB;AAClD,MAAMmB,IAAI,GAAGL,mBAAOG,UAAP,CAAkBjB,QAAlB,EACb,KAAKK,IADQ,EACF,IADE,EACI,EADJ,YACkBW,QADlB,OAAb;;AAEA,SAAO,KAAKhB,QAAL,KAAkBmB,IAAzB;AACH,CAJD;;eAMe3B,qBAAS4B,KAAT,CAAe,MAAf,EAAuB7B,UAAvB,C","sourcesContent":["import mongoose from 'mongoose';\r\nimport crypto from 'crypto';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n    email: { type: String, required: [true, 'Email is required'] },\r\n    firstName: { type: String,default: null },\r\n    lastName: { type: String,default: null },\r\n    password: { type: String, required: [true, 'Password is required'] },\r\n    phone: { type: String },\r\n    token: { type: String, default: null},\r\n    active: { default: true, type: Boolean },\r\n    salt : String,\r\n    type: { type: String, default: 'user'},\r\n},{ timestamps: true });\r\n\r\n\r\nUserSchema.methods.generateAuthToken = function() {\r\n    const token = jwt.sign({\r\n        id: this._id,\r\n        email: this.email,\r\n        firstName: this.firstName,\r\n        lastName: this.lastName,\r\n        type: this.type,\r\n    }, \"AmrEraky\");     // I can Replace 'AmrEraky' with any app key\r\n    this.token === token; \r\n    return token;\r\n};\r\n\r\n// Method to set salt and hash the password for a user \r\nUserSchema.methods.setPassword = function() {    \r\n    // Creating a unique salt for a particular user \r\n    this.salt = crypto.randomBytes(16).toString('hex'); \r\n    \r\n    // Hashing user's salt and password with 1000 iterations, \r\n    \r\n    this.password = crypto.pbkdf2Sync(this.password, this.salt,  \r\n    1000, 64, `sha512`).toString(`hex`); \r\n}; \r\n     \r\n// Method to check the entered password is correct or not \r\nUserSchema.methods.validPassword = function(password) { \r\n    const hash = crypto.pbkdf2Sync(password,  \r\n    this.salt, 1000, 64, `sha512`).toString(`hex`); \r\n    return this.password === hash; \r\n};\r\n\r\nexport default mongoose.model('User', UserSchema);"],"file":"user.model.js"}